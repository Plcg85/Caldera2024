/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Ventanas;

import BasesDeDatos.DevolverConexion;
import Funcionalidades.GuardarErrores;
import Funcionalidades.MensajesPopUp;
import Funcionalidades.VariablesTiempo;
import Tareas.ActualizarVentanaTemperaturas;
import java.io.IOException;
import javax.swing.table.DefaultTableModel;
import java.sql.*;
import java.util.Timer;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Pedro Luis
 */
public class VentanaTemperaturas extends javax.swing.JFrame {

    /**
     * Creates new form VentanaTemperaturas
     */
    //Modelo de la tabla
    DefaultTableModel tablaDeTemperaturas;

    //Tareas de la ventana Temperaturas
    ActualizarVentanaTemperaturas actualizarVentanaTemperaturas; //tarea

    //constructor de la ventanaTemperaturas
    public VentanaTemperaturas() throws SQLException, IOException {

        initComponents();

        this.setTitle("Temperaturas");

        tablaDeTemperaturas = (DefaultTableModel) tablaTemperaturas.getModel();

        rellenarTablaDeTemperaturas();

        inicializarTareas();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tablaTemperaturas = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(800, 480));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        tablaTemperaturas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Temperatura Salón", "Humedad Salon", "Temperatura Cpu", "Fecha"
            }
        ));
        jScrollPane1.setViewportView(tablaTemperaturas);
        if (tablaTemperaturas.getColumnModel().getColumnCount() > 0) {
            tablaTemperaturas.getColumnModel().getColumn(3).setPreferredWidth(250);
        }

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 713, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 342, Short.MAX_VALUE)
                .addGap(35, 35, 35))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing

        //Este evento es llamado cada vez que se  cierra la ventana de temperaturas
        detenerTareas();

    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaTemperaturas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaTemperaturas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaTemperaturas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaTemperaturas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new VentanaTemperaturas().setVisible(true);
                } catch (SQLException ex) {
                    try {
                        GuardarErrores.guardarErrores("VentanaTemperaturas", "Error al crear la ventana", ex.toString());
                    } catch (SQLException | IOException ex1) {
                        Logger.getLogger(VentanaTemperaturas.class.getName()).log(Level.SEVERE, null, ex1);
                    }
                } catch (IOException ex) {
                    Logger.getLogger(VentanaTemperaturas.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablaTemperaturas;
    // End of variables declaration//GEN-END:variables

    //este metodo limpia la tabla y luego la llena
    private void rellenarTablaDeTemperaturas() throws SQLException, IOException {

        //hay que saber cuantos elementos tiene la tabla porque este metodo no solo se llama al principio de crear la 
        //ventana, también se puede llamar con un boton que actualiza la tabla y entonces hay que vaciarla
        int numeroPosicionesTabla = tablaDeTemperaturas.getRowCount();

        //se borra la tabla si no esta vacia
        if (numeroPosicionesTabla != 0) {

            borrarTablaDeTemperaturas(numeroPosicionesTabla);

        } else {//si entra aqui es porque la tabla esta vacia

        }//final if

        llenaTablaDeTemperaturas();

    }//final metodo rellenarTablaDeTemperaturas

    private void borrarTablaDeTemperaturas(int numeroPosicionesTabla) {

        for (int i = 0; i < numeroPosicionesTabla; i++) {

            tablaDeTemperaturas.removeRow(0);

        }//final bucle borra tabla

    }//final metodo borrarTablaDeTemperaturas

    private void llenaTablaDeTemperaturas() throws SQLException, IOException {

        Connection conexion = DevolverConexion.devolverConexionParaCrearTablas();
        Statement stmt = conexion.createStatement();
        String consulta = "select * from temperaturas order by created_at desc limit 1000";
        ResultSet resultado = stmt.executeQuery(consulta);

        int contador = 0;

        while (resultado.next()) {

            float temperaturaSalon = resultado.getFloat("temperatura_salon");
            float humedadSalon = resultado.getFloat("humedad_salon");
            float temperaturaCpu = resultado.getFloat("temperatura_cpu");
            String fecha = resultado.getString("created_at");

            tablaDeTemperaturas.addRow(new Object[]{temperaturaSalon, humedadSalon, temperaturaCpu, fecha});

        }//fin while que recorre los resultados de busqueda

        DevolverConexion.cerrarConexion(conexion);

    }//final metodo llenaTablaDeTemperaturas

    private void inicializarTareas() {

        actualizarVentana(); //actualiza la tabla de temperaturas

    }//final metodo inicializarTareas

    private void actualizarVentana() {

        actualizarVentanaTemperaturas = new ActualizarVentanaTemperaturas(tablaDeTemperaturas);
        Timer temporizador = new Timer();
        temporizador.scheduleAtFixedRate(actualizarVentanaTemperaturas, 0, VariablesTiempo.unMinuto);

    }//final metodo actualizarVentana

    private void detenerTareas() {

        actualizarVentanaTemperaturas.cancel();

    }//final detener tareas

}//final clase ventanaTemperaturas
