package Ventanas;

import BasesDeDatos.BorrarBaseDeDatos;
import Funcionalidades.BorrarArchivoIniciacion;
import Funcionalidades.ComprobarPrimeraEjecucion;
import Funcionalidades.GuardarErrores;
import Sockets.ServidorCasa;
import Funcionalidades.VariablesTiempo;
import Tareas.ComprobarConexion;
import Tareas.ComprobarEquiposConectados;
import Tareas.ComprobarIpExterna;
import Tareas.ComprobarTemperaturas;
import java.io.IOException;
import java.sql.SQLException;
import javax.swing.JFrame;
import java.util.Timer;
import java.util.logging.Level;
import java.util.logging.Logger;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 *
 * @author Pedro Luis
 */
public class VentanaPrincipal extends javax.swing.JFrame {
    
    public static int puertoSocketServidorCasa = 9999;
    public static int puertoSocketServidorCaldera = 9998;
    public static String ipServidorCaldera = "192.168.1.105";

    /**
     * Creates new form VentanaPrincipal
     *
     * @throws java.io.IOException
     * @throws java.sql.SQLException
     */
    ComprobarIpExterna comprobarIp; //tarea
    ComprobarConexion comprobarConexion; //tarea
    ComprobarEquiposConectados comprobarEquiposConectados;//tarea
    ComprobarTemperaturas comprobarTemperaturas;

    public VentanaPrincipal() throws IOException, SQLException {

        initComponents();
        this.setTitle("Servidor Casa");

        //estos 2 metodos son para inicializar el programa desde 0, comentarlos para el funcionamiento normal del programa
        //BorrarBaseDeDatos.borrarBaseDeDatos();
        //BorrarArchivoIniciacion.borrarArchivoIniciacion();
        //////////////////////////////////////////////////////////////////
        ComprobarPrimeraEjecucion.esPrimeraEjecucion();//se comprueba si es la primera ejecución, y si no lo es se crean todas las bases de datos

        inicializarTareas();//las tareas que se ejecutarán a lo largo del programa
        
        ServidorCasa miServidor = new ServidorCasa(); //se crea el servidor de casa
        

    }//final constructor VentanaPrincipal

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        botonBorrarTodo = new javax.swing.JButton();
        BarraMenus = new javax.swing.JMenuBar();
        MenuNavegar = new javax.swing.JMenu();
        MenuDireccionIp = new javax.swing.JMenuItem();
        MenuConexionInternet = new javax.swing.JMenuItem();
        MenuEquiposConectados = new javax.swing.JMenuItem();
        MenuTemperaturas = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setName("VentanaPrincipal"); // NOI18N
        setPreferredSize(new java.awt.Dimension(1024, 640));
        setResizable(false);

        botonBorrarTodo.setText("BorrarTodo");
        botonBorrarTodo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonBorrarTodoActionPerformed(evt);
            }
        });

        MenuNavegar.setText("Navegar");

        MenuDireccionIp.setText("Direccion Ip");
        MenuDireccionIp.setToolTipText("");
        MenuDireccionIp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuDireccionIpActionPerformed(evt);
            }
        });
        MenuNavegar.add(MenuDireccionIp);

        MenuConexionInternet.setText("Conexion Internet");
        MenuConexionInternet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuConexionInternetActionPerformed(evt);
            }
        });
        MenuNavegar.add(MenuConexionInternet);

        MenuEquiposConectados.setText("Equipos Conectados");
        MenuEquiposConectados.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuEquiposConectadosActionPerformed(evt);
            }
        });
        MenuNavegar.add(MenuEquiposConectados);
        MenuEquiposConectados.getAccessibleContext().setAccessibleDescription("");

        MenuTemperaturas.setText("Temperaturas");
        MenuTemperaturas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuTemperaturasActionPerformed(evt);
            }
        });
        MenuNavegar.add(MenuTemperaturas);

        BarraMenus.add(MenuNavegar);

        setJMenuBar(BarraMenus);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(705, Short.MAX_VALUE)
                .addComponent(botonBorrarTodo)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(botonBorrarTodo)
                .addContainerGap(588, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    //Evento cuando pulsas el boton Direccion ip del menú Navegar
    private void MenuDireccionIpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuDireccionIpActionPerformed
        VentanaDireccionIp ventanaIp;
        try {
            ventanaIp = new VentanaDireccionIp();
            ventanaIp.setVisible(rootPaneCheckingEnabled);
            ventanaIp.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        } catch (SQLException | IOException ex) {
            Logger.getLogger(VentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_MenuDireccionIpActionPerformed

    //evento cuando pulsas el boton conexion
    private void MenuConexionInternetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuConexionInternetActionPerformed

        VentanaConexionInternet ventanaConexion;
        try {
            ventanaConexion = new VentanaConexionInternet();
            ventanaConexion.setVisible(rootPaneCheckingEnabled);
            ventanaConexion.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        } catch (SQLException | InterruptedException | IOException ex) {
            Logger.getLogger(VentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_MenuConexionInternetActionPerformed

    private void botonBorrarTodoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonBorrarTodoActionPerformed

        //al pulsar en este boton se reinicia todo
        detenerTareas();

        //se borra la base de datos y el archivo inicial 
        borrarDatos();

        compruebaSiEsPrimeraEjecucion();

        inicializarTareas();//las tareas que se ejecutarán a lo largo del programa

    }//GEN-LAST:event_botonBorrarTodoActionPerformed

    //Evento cuanto tocas en el menú equipos conectados
    private void MenuEquiposConectadosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuEquiposConectadosActionPerformed

        VentanaEquiposConectados ventanaEquiposConectados = null;
        try {
            ventanaEquiposConectados = new VentanaEquiposConectados();
        } catch (SQLException | IOException ex) {
            Logger.getLogger(VentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        ventanaEquiposConectados.setVisible(rootPaneCheckingEnabled);
        ventanaEquiposConectados.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

    }//GEN-LAST:event_MenuEquiposConectadosActionPerformed

    private void MenuTemperaturasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuTemperaturasActionPerformed
        
        VentanaTemperaturas ventanaTemperaturas = null;
        try {
            ventanaTemperaturas = new VentanaTemperaturas();
        } catch (SQLException | IOException ex) {
            Logger.getLogger(VentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        ventanaTemperaturas.setVisible(rootPaneCheckingEnabled);
        ventanaTemperaturas.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        
    }//GEN-LAST:event_MenuTemperaturasActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                try {
                    try {
                        new VentanaPrincipal().setVisible(true);
                    } catch (SQLException ex) {
                        Logger.getLogger(VentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);

                        try {
                            GuardarErrores.guardarErrores("VentanaPrincipal", "Error SQL", ex.toString());
                        } catch (SQLException ex1) {
                            Logger.getLogger(VentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex1);
                        }
                    }
                } catch (IOException ex) {
                    Logger.getLogger(VentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                    try {
                        GuardarErrores.guardarErrores("VentanaPrincipal", "Error ficheros", ex.toString());
                    } catch (SQLException | IOException ex1) {
                        Logger.getLogger(VentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex1);
                    }
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuBar BarraMenus;
    private javax.swing.JMenuItem MenuConexionInternet;
    private javax.swing.JMenuItem MenuDireccionIp;
    private javax.swing.JMenuItem MenuEquiposConectados;
    private javax.swing.JMenu MenuNavegar;
    private javax.swing.JMenuItem MenuTemperaturas;
    private javax.swing.JButton botonBorrarTodo;
    // End of variables declaration//GEN-END:variables

    /*este metodo se llama automaticamente al inicializar la ventana principal desde el constructor y sirve
        para inicializar las tareas que se irán ejecutando cada cierto tiempo.
     */
    private void inicializarTareas() {

        ip();//Va guardando la direccion Ip externa cuando cambia
        conexionAInternet(); //Va guardando cuando no hay conexion a internet
        equiposConectados(); //equiposConectados al router
        temperaturaCasa();// la temperatura del salon

    }//final inicializarTareas

    /*
    Este metodo añade una nueva tarea que es la de comprobar la direccion ip y también la de guardarla en la base de datos
     */
    private void ip() {

        comprobarIp = new ComprobarIpExterna();
        Timer temporizador = new Timer();
        temporizador.scheduleAtFixedRate(comprobarIp, 0, VariablesTiempo.diezMinutos);

    }//final ip

    private void conexionAInternet() {

        comprobarConexion = new ComprobarConexion();
        Timer temporizador = new Timer();
        temporizador.scheduleAtFixedRate(comprobarConexion, 0, VariablesTiempo.unMinuto);

    }//final conexionAInternet

    private void equiposConectados() {

        comprobarEquiposConectados = new ComprobarEquiposConectados();
        Timer temporizador = new Timer();
        temporizador.scheduleAtFixedRate(comprobarEquiposConectados, 0, VariablesTiempo.diezMinutos);

    }//final equipos conectados
    
    private void temperaturaCasa() {
        
        comprobarTemperaturas = new ComprobarTemperaturas();
        Timer temporizador = new Timer();
        temporizador.scheduleAtFixedRate(comprobarTemperaturas, 0,VariablesTiempo.cincoMinutos);
        
    }//final temperaturaCasa

    //detiene las tareas de la ventana principal
    private void detenerTareas() {
        comprobarIp.cancel();
        comprobarConexion.cancel();
        comprobarEquiposConectados.cancel();
        comprobarTemperaturas.cancel();
    }

    //borra la base de datos y el archivo inicial
    private void borrarDatos() {
        try {
            //borra la base de datos
            BorrarBaseDeDatos.borrarBaseDeDatos();
        } catch (SQLException ex) {
            Logger.getLogger(VentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
        //borra el archivo inicial
        BorrarArchivoIniciacion.borrarArchivoIniciacion();
    }

    //este metodo comprueba si es la primera ejecución 
    private void compruebaSiEsPrimeraEjecucion() {
        try {
            //////////////////////////////////////////////////////////////////
            ComprobarPrimeraEjecucion.esPrimeraEjecucion();//se comprueba si es la primera ejecución, y si no lo es se crean todas las bases de datos
        } catch (IOException | SQLException ex) {
            Logger.getLogger(VentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    

}//final clase VentanaPrincipal
