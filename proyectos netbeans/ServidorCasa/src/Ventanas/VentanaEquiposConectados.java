/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Ventanas;

import BasesDeDatos.DevolverConexion;
import Funcionalidades.GuardarEquipoConectado;
import Funcionalidades.GuardarEquipoConocido;
import Funcionalidades.GuardarErrores;
import Funcionalidades.MensajesPopUp;
import java.io.IOException;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Pedro Luis
 */
public class VentanaEquiposConectados extends javax.swing.JFrame {

    /**
     * Creates new form VentanaEquiposConectados
     */
    DefaultTableModel tablaEquipos; //el modelo de la tabla que pertenece a esta ventana

    public VentanaEquiposConectados() throws SQLException, IOException {

        initComponents();
        this.setTitle("Equipos Conectados al Router");
        tablaEquipos = (DefaultTableModel) tablaEquiposConectados.getModel();

        rellenarTablaEquiposConectadosAlRouter();

    }//final constructor ventanaEquiposConectados

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tablaEquiposConectados = new javax.swing.JTable();
        botonBuscarEquipos = new javax.swing.JButton();
        textFieldDia = new javax.swing.JTextField();
        textFieldMes = new javax.swing.JTextField();
        textFieldAno = new javax.swing.JTextField();
        botonOtrasBusquedasEquipos = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(800, 640));
        setResizable(false);

        tablaEquiposConectados.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Direccion Ip", "Direccion Mac", "Marca", "Nombre", "Fecha (Año, Mes,Dia,Hora)"
            }
        ));
        tablaEquiposConectados.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tablaEquiposConectadosMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(tablaEquiposConectados);

        botonBuscarEquipos.setText("Actualizar a la siguiente fecha:");
        botonBuscarEquipos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonBuscarEquiposActionPerformed(evt);
            }
        });

        textFieldDia.setText("Introduce el dia");
        textFieldDia.setToolTipText("");
        textFieldDia.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                textFieldDiaMousePressed(evt);
            }
        });

        textFieldMes.setText("Introduce el mes");
        textFieldMes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                textFieldMesMousePressed(evt);
            }
        });
        textFieldMes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textFieldMesActionPerformed(evt);
            }
        });

        textFieldAno.setText("Introduce el año");
        textFieldAno.setToolTipText("");
        textFieldAno.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                textFieldAnoMousePressed(evt);
            }
        });

        botonOtrasBusquedasEquipos.setText("Otras Busquedas");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(botonOtrasBusquedasEquipos)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(botonBuscarEquipos)
                                .addGap(48, 48, 48)
                                .addComponent(textFieldDia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(textFieldMes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(textFieldAno, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 38, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 362, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botonBuscarEquipos)
                    .addComponent(textFieldDia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textFieldMes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textFieldAno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(botonOtrasBusquedasEquipos)
                .addGap(15, 15, 15))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void textFieldMesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textFieldMesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textFieldMesActionPerformed

    //este evento salta cuando pulsas el raton
    private void tablaEquiposConectadosMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaEquiposConectadosMousePressed

        //esta es la fila seleccionada
        int filaSeleccionada = this.tablaEquiposConectados.getSelectedRow();

        String direccionIp = this.tablaEquiposConectados.getValueAt(filaSeleccionada, 0).toString();
        String direccionMac = this.tablaEquiposConectados.getValueAt(filaSeleccionada, 1).toString();
        String marca = this.tablaEquiposConectados.getValueAt(filaSeleccionada, 2).toString();
        String nombre = this.tablaEquiposConectados.getValueAt(filaSeleccionada, 3).toString();

        if (nombre.equals("Desconocido")) {

            String nombreNuevo = JOptionPane.showInputDialog("Introduce el nombre para este equipo");

            if (nombreNuevo == null) {
                nombreNuevo = "";// se pone cadena vacía y así no da error
            }//si has dado en el boton de cancelar sin introducir nombre

            if (!nombreNuevo.equals("")) {
                try {
                    //si no has puesto una cadena vacía

                    GuardarEquipoConectado.modificarNombreEquipoConectado(direccionMac, nombreNuevo);
                    GuardarEquipoConocido.guardarEquipoConocido(direccionIp, direccionMac, marca, nombreNuevo);
                    JOptionPane.showMessageDialog(rootPane, "Esto añadirá el equipo " + nombreNuevo + "-->" + direccionMac + " a la base de datos de equipos conocidos.");
                    rellenarTablaEquiposConectadosAlRouter();

                } catch (SQLException ex) {
                    System.out.println("has dado en cancelar");
                } catch (IOException ex) {
                    System.out.println("has dado en cancelar2");
                }
            }//final si la casilla la has dejado vacia
        }//final si el nombre  es Desconocido
    }//GEN-LAST:event_tablaEquiposConectadosMousePressed

    //este evento ocurre cuando se pulsa el boton del raton en el textfield dia
    private void textFieldDiaMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_textFieldDiaMousePressed
        textFieldDia.setText(""); //se vacía el contenido para que pueda ser añadido
    }//GEN-LAST:event_textFieldDiaMousePressed

    //este evento ocurre cuando se pulsa el boton del raton en el textfield Mes
    private void textFieldMesMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_textFieldMesMousePressed
        textFieldMes.setText("");//se vacía el contenido
    }//GEN-LAST:event_textFieldMesMousePressed

    private void textFieldAnoMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_textFieldAnoMousePressed
        textFieldAno.setText("");//se vacía el contenido
    }//GEN-LAST:event_textFieldAnoMousePressed

    //este evento se produce cuando se pulsa el boton actualizar con la siguiente fecha
    private void botonBuscarEquiposActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonBuscarEquiposActionPerformed

        boolean valoresCorrectos = false; //esta variable comprueba que los valores rellenados son correctos para una fecha
        int anio = 0;
        int mes = 0;
        int dia = 0;

        try {

            anio = Integer.parseInt(textFieldAno.getText().toString());
            mes = Integer.parseInt(textFieldMes.getText().toString());
            dia = Integer.parseInt(textFieldDia.getText().toString());

            if (anio > 2000 && anio < 2100 && mes <= 12 && mes >= 1 && dia >= 1 && dia <= 31) {
                System.out.println("Cumple todos los requisitos para ser una fecha");
                valoresCorrectos = true;
            } else {
                MensajesPopUp.muestraMensajeInformacion("Los numeros introducidos no pertenecen a una fecha correcta");
            }//final else
        } catch (Exception e) {
            MensajesPopUp.muestraMensajeInformacion("Introduce numeros en lugar de letras");
        }

        if (valoresCorrectos) {

            MensajesPopUp.muestraMensajeInformacion("Se va a actualizar la tabla con los datos requeridos");

            //hay que saber cuantos elementos tiene la tabla porque este metodo no solo se llama al principio de crear la 
            //ventana, también se puede llamar con un boton que actualiza la tabla y entonces hay que vaciarla
            int numeroPosicionesTabla = tablaEquipos.getRowCount();

            //se borra la tabla si no esta vacia
            if (numeroPosicionesTabla != 0) {

                borrarTablaEquiposConectados(numeroPosicionesTabla);

            }

            try {
                llenaTablaEquiposConectadosConFecha(anio, mes, dia);
            } catch (SQLException | IOException ex) {
                try {
                    GuardarErrores.guardarErrores("VentanaEquiposConectados", "Al rellenar la tabla con fechas dadas", ex.toString());
                } catch (SQLException | IOException ex1) {
                    Logger.getLogger(VentanaEquiposConectados.class.getName()).log(Level.SEVERE, null, ex1);
                }
            }

        }//final si los valores introducidos son correctos


    }//GEN-LAST:event_botonBuscarEquiposActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaEquiposConectados.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaEquiposConectados.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaEquiposConectados.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaEquiposConectados.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new VentanaEquiposConectados().setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(VentanaEquiposConectados.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(VentanaEquiposConectados.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonBuscarEquipos;
    private javax.swing.JButton botonOtrasBusquedasEquipos;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablaEquiposConectados;
    private javax.swing.JTextField textFieldAno;
    private javax.swing.JTextField textFieldDia;
    private javax.swing.JTextField textFieldMes;
    // End of variables declaration//GEN-END:variables

    //Este metodo se encarga de rellenar la tabla de equipos conectados al router
    private void rellenarTablaEquiposConectadosAlRouter() throws SQLException, IOException {

        //hay que saber cuantos elementos tiene la tabla porque este metodo no solo se llama al principio de crear la 
        //ventana, también se puede llamar con un boton que actualiza la tabla y entonces hay que vaciarla
        int numeroPosicionesTabla = tablaEquipos.getRowCount();
        
        //se borra la tabla si no esta vacia
        if (numeroPosicionesTabla != 0) {

            borrarTablaEquiposConectados(numeroPosicionesTabla);

        } 

        llenaTablaEquiposConectados();

    }//final metodo rellenarTablaEquiposConectadosAlRouter

    //este metodo rellena la tabla una vez se ha borrado
    private void llenaTablaEquiposConectados() throws SQLException, IOException {

        Connection conexion = DevolverConexion.devolverConexionParaCrearTablas();
        Statement stmt = conexion.createStatement();
        String consulta = "select * from conexiones_router order by created_at desc limit 1000;";
        ResultSet resultado = stmt.executeQuery(consulta);

        int contador = 0;

        while (resultado.next()) {

            String direccion_ip = resultado.getString("direccion_ip");
            String direccion_mac = resultado.getString("direccion_mac");
            String marca = resultado.getString("marca");
            String nombre = resultado.getString("nombre");
            String fecha = resultado.getString("created_at");

            tablaEquipos.addRow(new Object[]{direccion_ip, direccion_mac, marca, nombre, fecha});
            contador++;

        }//final while que recorre el result set
        
        if (contador==0){
            MensajesPopUp.muestraMensajeInformacion("Asegurese de tener instalado nmap en el dispositivo en la ruta por defecto");
        }//si no hay datos en la base de datos
        
        conexion.close();

    }//final metodo llenaTablaEquiposConectados

    //este metodo borra la tabla equiposConectados
    private void borrarTablaEquiposConectados(int numeroPosicionesTabla) {

        for (int i = 0; i < numeroPosicionesTabla; i++) {

            tablaEquipos.removeRow(0);

        }//final bucle borra tabla    
    }

    private void llenaTablaEquiposConectadosConFecha(int anio, int mes, int dia) throws SQLException, IOException {

        Connection conexion = DevolverConexion.devolverConexionParaCrearTablas();
        Statement stmt = conexion.createStatement();
        String consulta = "select * from conexiones_router where year(created_at) = '" + anio + "' and month(created_at) = '" + mes + "' and day(created_at) = '" + dia + "' order by created_at desc ";
        ResultSet resultado = stmt.executeQuery(consulta);

        int contador = 0;

        while (resultado.next()) {

            String direccion_ip = resultado.getString("direccion_ip");
            String direccion_mac = resultado.getString("direccion_mac");
            String marca = resultado.getString("marca");
            String nombre = resultado.getString("nombre");
            String fecha = resultado.getString("created_at");

            tablaEquipos.addRow(new Object[]{direccion_ip, direccion_mac, marca, nombre, fecha});
            contador++;

        }//final while que recorre el result set

        conexion.close();

//        SELECT * FROM conexiones_router WHERE YEAR(created_at) = '2024'
//        AND MONTH( created_at ) = '7'
//        ORDER BY created_at DESC
    }//final llenaTablaEquiposConectadosConFecha
}//final clase VentanaEquiposConectados
