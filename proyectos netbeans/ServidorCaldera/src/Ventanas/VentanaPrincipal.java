/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Ventanas;

import BasesDeDatos.BorrarBaseDeDatos;
import Funcionalidades.EstadoBomba;
import Funcionalidades.BorrarArchivoIniciacion;
import Funcionalidades.ComprobarPrimeraEjecucion;
import Funcionalidades.DevolverBusquedasBd;
import Funcionalidades.DevuelveTemperaturaCaldera;
import Funcionalidades.EscribirEnInterfaz;
import Funcionalidades.EstadoModoForzoso;
import Funcionalidades.GuardarErrores;
import Funcionalidades.MensajesPopUp;
import Funcionalidades.ModificarValoresConfCaldera;
import Sockets.ServidorCaldera;
import Tareas.TareaCaldera;
import Tareas.TareaLimpiarBasesDatos;
import java.io.IOException;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.Timer;

/**
 *
 * @author Pedro Luis
 */
public class VentanaPrincipal extends javax.swing.JFrame {

    float temperaturaCasa = 0.0f;
    float temperaturaDeseada = 0.0f;
    float temperaturaCaldera = 0.0f;
    float estadoRele = 0.0f;

    private boolean interfazGraficaCargada = false;//al principio la interfaz grafica no estará cargada, esto sirve para saber cuando ha terminado de cargar y hacer cambios en ella
    public static String ipServidorCasa = "192.168.1.103"; //la direccion ip del servidor de casa para conectarse a ella
    public static int puertoSocketServidorCasa = 9999; //el puerto del servidor casa
    public static int puertoSocketServidorCaldera = 9998; //el puerto del servidor caldera

    TareaCaldera tareaCaldera;
    TareaLimpiarBasesDatos tareaLimpiarBasesDatos;

    /**
     * Creates new form VentanaPrincipal
     */
    public VentanaPrincipal() throws IOException, SQLException, InterruptedException {

        initComponents();
        this.setTitle("Servidor Caldera");

        //se comprueba si es la primera ejecucion para crear archivos y bd
        ComprobarPrimeraEjecucion.esPrimeraEjecucion();
        iniciarComponentesInterfazGrafica(); //para que al iniciar no estén los valores por defecto
        interfazGraficaCargada = true;
        EstadoBomba.apagadoBomba(labelEstadoBomba);
        EstadoModoForzoso.apagadoModoForzoso(labelEstadoModoForzoso);
        iniciarServidorCaldera();
        inicializarTareas();
        
    }//final constructor 

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        labelTemperaturaCasa = new javax.swing.JLabel();
        labelTemperaturaDeseada = new javax.swing.JLabel();
        labelTemperaturaCaldera = new javax.swing.JLabel();
        labelEstadoBomba = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        comboBoxTemperaturaSeteo = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        labelEstadoModoForzoso = new javax.swing.JLabel();
        botonActivarModoForzoso = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        labelModoLenia = new javax.swing.JLabel();
        botonActivarModoLenia = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        comboBoxTemperaturaSeleccionada = new javax.swing.JComboBox<>();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 32767));
        botonDesactivarModoLenia = new javax.swing.JButton();
        desactivarModoForzoso = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        jLabel10 = new javax.swing.JLabel();
        MenuNavegar = new javax.swing.JMenuBar();
        Menu = new javax.swing.JMenu();
        menuApagarPrograma = new javax.swing.JMenuItem();
        menuItemBorrar = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1090, 1000));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(153, 0, 0), new java.awt.Color(51, 153, 0)));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setBackground(new java.awt.Color(0, 0, 0));
        jLabel1.setText("Temperatura Casa");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 70, -1, -1));

        jLabel12.setBackground(new java.awt.Color(0, 0, 0));
        jLabel12.setText("Temperatura Deseada");
        jPanel1.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 70, -1, -1));

        jLabel13.setBackground(new java.awt.Color(0, 0, 0));
        jLabel13.setText("Temperatura Caldera");
        jPanel1.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 70, -1, -1));

        jLabel14.setText("Estado Bomba");
        jPanel1.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(920, 70, -1, -1));

        labelTemperaturaCasa.setFont(new java.awt.Font("Segoe UI", 1, 48)); // NOI18N
        labelTemperaturaCasa.setText("65.00");
        jPanel1.add(labelTemperaturaCasa, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 90, -1, -1));

        labelTemperaturaDeseada.setFont(new java.awt.Font("Segoe UI", 1, 48)); // NOI18N
        labelTemperaturaDeseada.setText("20.00");
        jPanel1.add(labelTemperaturaDeseada, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 90, -1, -1));

        labelTemperaturaCaldera.setFont(new java.awt.Font("Segoe UI", 1, 48)); // NOI18N
        labelTemperaturaCaldera.setText("65.00");
        jPanel1.add(labelTemperaturaCaldera, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 90, -1, -1));

        labelEstadoBomba.setFont(new java.awt.Font("Segoe UI", 1, 48)); // NOI18N
        labelEstadoBomba.setText("On");
        jPanel1.add(labelEstadoBomba, new org.netbeans.lib.awtextra.AbsoluteConstraints(930, 90, -1, -1));

        jLabel15.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/termometros.jpg"))); // NOI18N
        jLabel15.setText("jLabel15");
        jLabel15.setMaximumSize(new java.awt.Dimension(980, 250));
        jLabel15.setMinimumSize(new java.awt.Dimension(980, 250));
        jLabel15.setPreferredSize(new java.awt.Dimension(980, 250));
        jPanel1.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1080, 250));

        jPanel2.setBackground(new java.awt.Color(204, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(153, 0, 0), null));

        comboBoxTemperaturaSeteo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxTemperaturaSeteoActionPerformed(evt);
            }
        });

        jLabel5.setText("Elige la temperatura de seteo de la caldera");

        jLabel6.setText("Estado Modo Forzoso");

        labelEstadoModoForzoso.setText("off");

        botonActivarModoForzoso.setText("Activar ");
        botonActivarModoForzoso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonActivarModoForzosoActionPerformed(evt);
            }
        });

        jLabel8.setText("Estado Modo Leña");

        labelModoLenia.setText("off");

        botonActivarModoLenia.setText("Activar");
        botonActivarModoLenia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonActivarModoLeniaActionPerformed(evt);
            }
        });

        jLabel7.setText("Selecciona la temperatura deseada");

        comboBoxTemperaturaSeleccionada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxTemperaturaSeleccionadaActionPerformed(evt);
            }
        });

        botonDesactivarModoLenia.setText("Desactivar");
        botonDesactivarModoLenia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonDesactivarModoLeniaActionPerformed(evt);
            }
        });

        desactivarModoForzoso.setText("Desactivar");
        desactivarModoForzoso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                desactivarModoForzosoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(60, 60, 60)
                                .addComponent(jLabel7))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(68, 68, 68)
                                .addComponent(comboBoxTemperaturaSeteo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 247, Short.MAX_VALUE)
                                .addComponent(comboBoxTemperaturaSeleccionada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(160, 160, 160)))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addGap(128, 128, 128)
                                .addComponent(jLabel6)
                                .addGap(58, 58, 58))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(44, 44, 44)
                                .addComponent(labelModoLenia)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(labelEstadoModoForzoso)
                                .addGap(106, 106, 106))
                            .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(botonActivarModoLenia)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(botonDesactivarModoLenia)
                        .addGap(92, 92, 92)
                        .addComponent(botonActivarModoForzoso)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(desactivarModoForzoso)
                        .addGap(26, 26, 26)))
                .addGap(36, 36, 36))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(jLabel8)
                    .addComponent(jLabel7))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(comboBoxTemperaturaSeleccionada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(comboBoxTemperaturaSeteo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(labelEstadoModoForzoso)
                        .addComponent(labelModoLenia)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(botonActivarModoLenia)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(botonActivarModoForzoso)
                        .addComponent(desactivarModoForzoso)
                        .addComponent(botonDesactivarModoLenia)))
                .addContainerGap(13, Short.MAX_VALUE))
        );

        textArea.setColumns(20);
        textArea.setRows(5);
        jScrollPane2.setViewportView(textArea);

        jLabel10.setText("Mensajes de la Caldera");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 507, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(175, 175, 175)
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 412, Short.MAX_VALUE)
                .addContainerGap())
        );

        Menu.setText("Menu");

        menuApagarPrograma.setText("Apagar programa");
        menuApagarPrograma.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuApagarProgramaActionPerformed(evt);
            }
        });
        Menu.add(menuApagarPrograma);

        menuItemBorrar.setText("Borrar todo");
        menuItemBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemBorrarActionPerformed(evt);
            }
        });
        Menu.add(menuItemBorrar);

        MenuNavegar.add(Menu);

        setJMenuBar(MenuNavegar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //evento cuando se pulsa el menu item llamado borrar todo
    private void menuItemBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemBorrarActionPerformed

        detenerTareas();
        try {
            
            System.out.println("Programa detenido durante 10 segundos");
            Thread.sleep(10000);
            
        } catch (InterruptedException ex) {
            Logger.getLogger(VentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.out.println("borrando datos");
        try {
            borrarDatos();
        } catch (SQLException | IOException ex) {
            Logger.getLogger(VentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            compruebaSiEsPrimeraEjecucionn();
        } catch (SQLException | IOException ex) {
            Logger.getLogger(VentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
        inicializarTareas();

    }//GEN-LAST:event_menuItemBorrarActionPerformed

    private void botonActivarModoForzosoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonActivarModoForzosoActionPerformed

        //comprobar el estado del modo forzoso en la base de datos
        int estadoModoForzoso = 0;
        try {
            estadoModoForzoso = DevolverBusquedasBd.estadoModoForzoso();
        } catch (SQLException | IOException ex) {
            
            try {
                GuardarErrores.guardarErrores("Ventana Principal","botonActivarModoForzosoActionPerformed",ex.toString());
            } catch (SQLException | IOException ex1) {
                Logger.getLogger(VentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex1);
            }
            Logger.getLogger(VentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
        //si está encendido no hacer nada
        if (estadoModoForzoso == 1) {

            String mensaje = "El modo forzoso ya esta encendido";
            //MensajesPopUp.muestraMensajeInformacion(mensaje);

            String frase = mensaje + ". Fecha: ";
            EscribirEnInterfaz.escribirFrase(frase, textArea);

        }//final si esta encendido

        //si está apagado,se activa el modo forzoso
        if (estadoModoForzoso == 0) {

            try {

                ModificarValoresConfCaldera.encenderModoForzoso();//se actualiza la base de datos
                //actualizarEstadoModoForzoso();//se actualiza la interfaz grafica
                EstadoModoForzoso.encendidoModoForzoso(labelEstadoModoForzoso);

                //se escribe en textArea
                String frase = "Modo forzoso activado. ";
                EscribirEnInterfaz.escribirFrase(frase, textArea);

            } catch (SQLException | IOException ex) {
                Logger.getLogger(VentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                try {
                    GuardarErrores.guardarErrores("Ventana Principal", "ActivarModoForzosoActionPerformed forzoso == 0", ex.toString());
                } catch (SQLException | IOException ex1) {
                    Logger.getLogger(VentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex1);
                }
            }

        }//final si esta apagado

    }//GEN-LAST:event_botonActivarModoForzosoActionPerformed

    private void botonActivarModoLeniaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonActivarModoLeniaActionPerformed

        //comprobar el estado del modo leña en la base de datos
        int estadoModoLenia = 0;
        try {
            estadoModoLenia = DevolverBusquedasBd.estadoModoLenia();
        } catch (SQLException | IOException ex) {
            try {
                GuardarErrores.guardarErrores("VentanaPrincipal", "botonActivarModoLeniaAction...", ex.toString());
            } catch (SQLException | IOException ex1) {
                Logger.getLogger(VentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex1);
            }
            Logger.getLogger(VentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
        //si está encendido no hacer nada
        if (estadoModoLenia == 1) {

            String mensaje = "El modo leña ya esta encendido";
            //MensajesPopUp.muestraMensajeInformacion(mensaje);

            String frase = mensaje;
            EscribirEnInterfaz.escribirFrase(frase, textArea);

        }//final si esta encendido

        //si está apagado,se activa el modo leña
        if (estadoModoLenia == 0) {

            try {

                ModificarValoresConfCaldera.encenderModoLenia();//se actualiza la base de datos
                actualizarEstadoModoLenia();//se actualiza la interfaz grafica

                //se escribe en textArea
                String frase = "Modo leña activado. ";
                EscribirEnInterfaz.escribirFrase(frase, textArea);

            } catch (SQLException | IOException ex) {
                try {
                    GuardarErrores.guardarErrores("VentanaPrincipal", "botonActivarModoLeniaAction...if modolenia=1", ex.toString());
                } catch (SQLException | IOException ex1) {
                    Logger.getLogger(VentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex1);
                }
                Logger.getLogger(VentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }

        }//final si esta apagado


    }//GEN-LAST:event_botonActivarModoLeniaActionPerformed

    private void comboBoxTemperaturaSeteoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxTemperaturaSeteoActionPerformed

        if (interfazGraficaCargada) {

            String seteoElegido = comboBoxTemperaturaSeteo.getSelectedItem().toString();

            //se escribe en el textArea de la interfaz grafica
            String frase = "Temperatura de seteo cambiada a " + seteoElegido;
            EscribirEnInterfaz.escribirFrase(frase, textArea);

            seteoElegido = seteoElegido.replaceAll("[º]", "");
            float seteoSeleccionado = Float.parseFloat(seteoElegido);

            try {
                ModificarValoresConfCaldera.modificarTemperaturaSeteo(seteoSeleccionado);
            } catch (SQLException | IOException ex) {
                try {
                    GuardarErrores.guardarErrores("VentanaPrincipal", "comboBoxTemperaturaSeteoAction...", ex.toString());
                } catch (SQLException | IOException ex1) {
                    Logger.getLogger(VentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex1);
                }
                Logger.getLogger(VentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            //si la interfaz grafica no esta cargada no hace nada
        }//final if

    }//GEN-LAST:event_comboBoxTemperaturaSeteoActionPerformed

    private void comboBoxTemperaturaSeleccionadaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxTemperaturaSeleccionadaActionPerformed

        if (interfazGraficaCargada) {

            String temperaturaSeleccionada = comboBoxTemperaturaSeleccionada.getSelectedItem().toString();

            //se escribe en el textArea de la interfaz grafica
            String frase = "Temperatura deseada de casa cambiada a " + temperaturaSeleccionada;
            EscribirEnInterfaz.escribirFrase(frase, textArea);

            //se transforman los datos para llevarlos a la base de datos
            temperaturaSeleccionada = temperaturaSeleccionada.replaceAll("[º]", "");
            float temperaturaSeleccionadaCasa = Float.parseFloat(temperaturaSeleccionada);
            try {
                ModificarValoresConfCaldera.modificarTemperaturaSeleccionada(temperaturaSeleccionadaCasa);
                actualizarTemperaturaDeseadaInterfaz(temperaturaSeleccionada);
            } catch (SQLException | IOException ex) {
                try {
                    GuardarErrores.guardarErrores("VentanaPrincipal", "comboBoxTemperaturaSeleccionadaAction...", ex.toString());
                } catch (SQLException | IOException ex1) {
                    Logger.getLogger(VentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex1);
                }
                Logger.getLogger(VentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }

        } else {
            //si no esta cargada la interfaz grafica no hace nada
        }


    }//GEN-LAST:event_comboBoxTemperaturaSeleccionadaActionPerformed

    private void botonDesactivarModoLeniaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonDesactivarModoLeniaActionPerformed

        //comprobar el estado del modo leña en la base de datos
        int estadoModoLenia = 0;
        try {
            estadoModoLenia = DevolverBusquedasBd.estadoModoLenia();
        } catch (SQLException | IOException ex) {
            Logger.getLogger(VentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
        //si está encendido hay que apagarlo
        if (estadoModoLenia == 1) {

            try {

                ModificarValoresConfCaldera.apagarModoLenia();//se actualiza la base de datos
                actualizarEstadoModoLenia();//se actualiza la interfaz grafica

                //se escribe en textArea
                String frase = "Modo leña desactivado. ";
                EscribirEnInterfaz.escribirFrase(frase, textArea);

            } catch (SQLException | IOException ex) {
                try {
                    GuardarErrores.guardarErrores("VentanaPrincipal", "botonDesactivarModoleaniaactio...", ex.toString());
                } catch (SQLException | IOException ex1) {
                    Logger.getLogger(VentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex1);
                }
                Logger.getLogger(VentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }

        }//final si esta encendido

        //si está apagado,no se hace nada
        if (estadoModoLenia == 0) {

            String mensaje = "El modo leña ya esta apagado";
            //MensajesPopUp.muestraMensajeInformacion(mensaje);

            String frase = mensaje;
            EscribirEnInterfaz.escribirFrase(frase, textArea);

        }//final si esta apagado


    }//GEN-LAST:event_botonDesactivarModoLeniaActionPerformed

    private void desactivarModoForzosoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_desactivarModoForzosoActionPerformed

        //comprobar el estado del modo forzoso en la base de datos
        int estadoModoForzoso = 0;
        try {
            estadoModoForzoso = DevolverBusquedasBd.estadoModoForzoso();
        } catch (SQLException | IOException ex) {
            Logger.getLogger(VentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
        //si está encendido hay que apagarlo
        if (estadoModoForzoso == 1) {

            try {

                //ModificarValoresConfCaldera.apagarModoForzoso();//se actualiza la base de datos
                //actualizarEstadoModoForzoso();//se actualiza la interfaz grafica
                EstadoModoForzoso.apagadoModoForzoso(labelEstadoModoForzoso);

                //se escribe en textArea
                String frase = "Modo forzoso desactivado. ";
                EscribirEnInterfaz.escribirFrase(frase, textArea);

            } catch (SQLException | IOException ex) {
                try {
                    GuardarErrores.guardarErrores("VentanaPrincipal", "botonDesactivarModoforzosoaction...", ex.toString());
                } catch (SQLException | IOException ex1) {
                    Logger.getLogger(VentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex1);
                }
                Logger.getLogger(VentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }

        }//final si esta encendido

        //si está apagado,no se hace nada
        if (estadoModoForzoso == 0) {

            String mensaje = "El modo forzoso ya esta apagado";
            //MensajesPopUp.muestraMensajeInformacion(mensaje);

            String frase = mensaje ;
            EscribirEnInterfaz.escribirFrase(frase, textArea);

        }//final si esta apagado

    }//GEN-LAST:event_desactivarModoForzosoActionPerformed

    private void menuApagarProgramaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuApagarProgramaActionPerformed

        try {
            //hay que comprobar como esta si esta en modo leña
            int tempModoLenia = DevolverBusquedasBd.estadoModoLenia();
            //hay que comprobar que la temperatura de la caldera no sea muy alta
            float temperaturaCaldera = DevolverBusquedasBd.ultimaTempCaldera();

            if ((tempModoLenia == 0) && (temperaturaCaldera < 75)) {

                //si se cumplen estad dos cosas se apaga el programa
                MensajesPopUp.muestraMensajeInformacion("La temperatua de la caldera es correcta y el modo leña está desactivado, puedes cerrar");
                detenerTareas();
                EstadoBomba.apagadoBomba(labelEstadoBomba);
                System.exit(0);

            } else {

                MensajesPopUp.muestraMensajeInformacion("No se puede cerrar el programa porque la temperatura de la caldera es alta o está activado el modo leña");

            }
        } catch (SQLException | IOException ex) {
            try {
                GuardarErrores.guardarErrores("VentanaPrincipal", "menuApagarProgramaAction...", ex.toString());
            } catch (SQLException | IOException ex1) {
                Logger.getLogger(VentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex1);
            }
            Logger.getLogger(VentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_menuApagarProgramaActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing

        //este evento es llamado al intentar cerrar la ventana
        try {
            //hay que comprobar como esta si esta en modo leña
            int tempModoLenia = DevolverBusquedasBd.estadoModoLenia();
            //hay que comprobar que la temperatura de la caldera no sea muy alta
            float temperaturaCaldera = DevolverBusquedasBd.ultimaTempCaldera();

            if ((tempModoLenia == 0) && (temperaturaCaldera < 75)) {

                //si se cumplen estad dos cosas se apaga el programa
                MensajesPopUp.muestraMensajeInformacion("La temperatua de la caldera es correcta y el modo leña está desactivado, puedes cerrar");
                detenerTareas();
                EstadoBomba.apagadoBomba(labelEstadoBomba);
                System.exit(0);

            } else {

                MensajesPopUp.muestraMensajeInformacion("No se deberia cerrar el programa porque la temperatura de la caldera es alta o está activado el modo leña");

            }
        } catch (SQLException | IOException ex) {
            try {
                GuardarErrores.guardarErrores("VentanaPrincipal", "menuApagarProgramaAction...", ex.toString());
            } catch (SQLException | IOException ex1) {
                Logger.getLogger(VentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex1);
            }
            Logger.getLogger(VentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    try {
                        new VentanaPrincipal().setVisible(true);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(VentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } catch (IOException | SQLException ex) {
                    Logger.getLogger(VentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu Menu;
    private javax.swing.JMenuBar MenuNavegar;
    private javax.swing.JButton botonActivarModoForzoso;
    private javax.swing.JButton botonActivarModoLenia;
    private javax.swing.JButton botonDesactivarModoLenia;
    private javax.swing.JComboBox<String> comboBoxTemperaturaSeleccionada;
    private javax.swing.JComboBox<String> comboBoxTemperaturaSeteo;
    private javax.swing.JButton desactivarModoForzoso;
    private javax.swing.Box.Filler filler1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel labelEstadoBomba;
    private javax.swing.JLabel labelEstadoModoForzoso;
    private javax.swing.JLabel labelModoLenia;
    private javax.swing.JLabel labelTemperaturaCaldera;
    private javax.swing.JLabel labelTemperaturaCasa;
    private javax.swing.JLabel labelTemperaturaDeseada;
    private javax.swing.JMenuItem menuApagarPrograma;
    private javax.swing.JMenuItem menuItemBorrar;
    private javax.swing.JTextArea textArea;
    // End of variables declaration//GEN-END:variables

    private void detenerTareas() {

        tareaCaldera.cancel();
        tareaLimpiarBasesDatos.cancel();

    }// cuando se llama a este metodo se detienen todas las tareas

    //borra toda la gbase de datos
    private void borrarDatos() throws SQLException, IOException {
        try {
            //borra la base de datos
            BorrarBaseDeDatos.borrarBaseDeDatos();
        } catch (SQLException ex) {
            MensajesPopUp.muestraMensajeInformacion("Error al borrar la base de datos procedimiento borrarDatos()");
            Logger.getLogger(VentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
        //borra el archivo inicial
        try{
            BorrarArchivoIniciacion.borrarArchivoIniciacion();
        }catch(Exception ex){
            GuardarErrores.guardarErrores("VentanaPrincipal", "borrarArchivoIniciacion --> borrarDatos()", ex.toString());
        }
        
    }//final metodo borrar datos

    //Comprueba si es la primera ejecucion
    private void compruebaSiEsPrimeraEjecucionn() throws SQLException, IOException {

        try {
            //////////////////////////////////////////////////////////////////
            ComprobarPrimeraEjecucion.esPrimeraEjecucion();//se comprueba si es la primera ejecución, y si no lo es se crean todas las bases de datos
        } catch (IOException | SQLException ex) {
            GuardarErrores.guardarErrores("VentanaPrincipal", "compruebaSiEsPrimeraEjecucion()", ex.toString());
            Logger.getLogger(VentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void inicializarTareas() {

        tareaCaldera(); //la tarea principal del programa que toma decisiones en base a los datos que tiene
        tareaLimpiarBasesDatos(); //delete from tempcasa where created_at <= CURRENT_TIMESTAMP - INTERVAL 2 Day;

    }//final iniciarlizarTareas

    //aqui se actualizan los componentes de la interfaz grafica
    private void iniciarComponentesInterfazGrafica() throws SQLException, IOException, InterruptedException {

        temperaturaCasa = actualizarGraficoTemperaturaCasa();
        temperaturaDeseada = actualizarGraficoTemperaturaDeseada();
        temperaturaCaldera = actualizarGraficoTemperaturaCaldera();
        estadoRele = actualizarGraficoEstadoRele();

        actualizarComboBoxDeSeteo();
        actualizarComboBoxTemperaturaSeleccionada();
        actualizarEstadoModoLenia();
        actualizarEstadoModoForzoso();

    }//final iniciarComponentesInterfazGrafica

    private void actualizarComboBoxDeSeteo() throws SQLException, IOException {

        //rellenar combobox temperaturaseteo
        float temperaturaSeteo = DevolverBusquedasBd.devuelveTemperaturaSeteo();
        for (int i = 60; i <= 80; i++) {

            String elemento = "";
            elemento = i + "º";
            comboBoxTemperaturaSeteo.addItem(elemento);
            if (i == temperaturaSeteo) {
                comboBoxTemperaturaSeteo.setSelectedItem(elemento);
            }//final si coinciden

        }//final relleno del combobox temperatura seteo
    }//final actualizarTemperaturaDeSeteo

    private void actualizarComboBoxTemperaturaSeleccionada() throws SQLException, IOException {

        //rellenar comboBoxtemperaturaSeleccionada
        float temperaturaSeleccionada = DevolverBusquedasBd.devuelveTemperaturaSeleccionada();
        for (int i = 0; i <= 30; i++) {

            String temperaturaSeleccionadaString = String.valueOf(temperaturaSeleccionada);
            String temperaturaSeleccionadaStringGrados = temperaturaSeleccionadaString + "º";

            String elemento = "";
            elemento = i + ".0º";
            comboBoxTemperaturaSeleccionada.addItem(elemento);

            if (temperaturaSeleccionadaStringGrados.equals(elemento)) {

                comboBoxTemperaturaSeleccionada.setSelectedItem(elemento);

            }//este sera el valor del combobox por defecto

            elemento = i + ".5º";
            comboBoxTemperaturaSeleccionada.addItem(elemento);

            if (temperaturaSeleccionadaStringGrados.equals(elemento)) {

                comboBoxTemperaturaSeleccionada.setSelectedItem(elemento);

            }//este sera el valor del combobox por defecto

        }//final añadir elementos al combobox

    }//final actualizarComboBoxTemperaturaSeleccionada()

    public float actualizarGraficoTemperaturaCasa() throws IOException, SQLException {

        //se mira en la base de datos local
        temperaturaCasa = DevolverBusquedasBd.devuelveUltimaTemperaturaCasa();
        labelTemperaturaCasa.setText(temperaturaCasa + "º");
        return temperaturaCasa;

    }//final actualizarTemperaturaCaldera

    private float actualizarGraficoTemperaturaDeseada() throws SQLException, IOException {

        float temperaturaSeleccionada = DevolverBusquedasBd.devuelveTemperaturaSeleccionada();
        labelTemperaturaDeseada.setText(temperaturaSeleccionada + "º");
        return temperaturaSeleccionada;

    }//final actualizar Grafico Temperatura Deseada

    private float actualizarGraficoTemperaturaCaldera() throws IOException, InterruptedException {

        float temperaturaCaldera = 0.0f;
        //preguntar a arduino la temperatura del sensor que hay en la caldera
        try {

            DevuelveTemperaturaCaldera.crearArchivoTemperaturaCaldera();
            temperaturaCaldera = DevuelveTemperaturaCaldera.compruebaTemperaturaCaldera();
            String etiqueta = temperaturaCaldera + "º";
            labelTemperaturaCaldera.setText(etiqueta);

            DevuelveTemperaturaCaldera.eliminaArchivoTemperaturaCaldera();

        } catch (Exception E) {
            System.out.println("Error en modulo VentanaPrincipal. actualizarGraficoTemperaturaCaldera");
        }
        return temperaturaCaldera;

    }//final actualizarGraficoTemperaturaCaldera

    private float actualizarGraficoEstadoRele() throws SQLException, IOException {

        float estadoRele = DevolverBusquedasBd.devuelveEstadoRele();

        if (estadoRele == 30.0f) {
            labelEstadoBomba.setText("Off");
        } else {
            labelEstadoBomba.setText("On");
        }

        return estadoRele;

    }//final actualizarGraficoEstadoRele

    private void actualizarTemperaturaDeseadaInterfaz(String temperaturaSeleccionada) {

        labelTemperaturaDeseada.setText(temperaturaSeleccionada + "º");

    }//final actualizarTemperaturaDeseadaInterfaz

    private void actualizarEstadoModoLenia() throws SQLException, IOException {

        //actualiza el estado de la etiqueta de la interfaz
        int modoLenia = DevolverBusquedasBd.estadoModoLenia();
        if (modoLenia == 0) {

            labelModoLenia.setText("Off");

        }//si el modoLenia esta activado
        if (modoLenia == 1) {

            labelModoLenia.setText("On");

        } //si el modoLenia esta activado
        //si el modoLenia esta activado

    }//fin actualizarEstadoModoLenia

    private void actualizarEstadoModoForzoso() throws SQLException, IOException {

        //actualiza el estado de la etiqueta de la interfaz
        int modoForzoso = DevolverBusquedasBd.estadoModoForzoso();
        if (modoForzoso == 0) {

            labelEstadoModoForzoso.setText("Off");

        }//si el modoLenia esta activado
        if (modoForzoso == 1) {

            labelEstadoModoForzoso.setText("On");

        } //si el modoLenia esta activado
        //si el modoLenia esta activado

    }//final actualizarEstadoModoForzoso

    private void iniciarServidorCaldera() {

        ServidorCaldera miServidor = new ServidorCaldera();

    }//final iniciarServidor

    private void tareaCaldera() {

        tareaCaldera = new TareaCaldera(labelTemperaturaCasa, labelTemperaturaCaldera, labelEstadoBomba, textArea);
        Timer temporizador = new Timer();
        temporizador.scheduleAtFixedRate(tareaCaldera, 8000, 10000);

    }//final tareaCaldera

    private void tareaLimpiarBasesDatos() {

        tareaLimpiarBasesDatos = new TareaLimpiarBasesDatos();
        Timer temporizador = new Timer();
        temporizador.schedule(tareaLimpiarBasesDatos, 20000, 3600000);

    }//final tareaLimpiarBasesDatos

}//final clase
